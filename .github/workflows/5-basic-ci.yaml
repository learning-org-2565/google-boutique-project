# Iteration 5: Multi-Service Isolated CI Pipeline
# Learning Focus: Service isolation, path-based triggers, multi-technology support
# Only changed microservices will build and deploy

name: 5-multi-service-isolated-ci

on:
  push:
    branches: [main]
    paths:
      - 'src/currencyservice/**'
      - 'src/productcatalogservice/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main]
    paths:
      - 'src/currencyservice/**'
      - 'src/productcatalogservice/**'
      - '.github/workflows/**'

# Global environment variables
env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

jobs:
  # Job 1: Detect which services changed
  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      currency_changed: ${{ steps.changes.outputs.currency }}
      productcatalog_changed: ${{ steps.changes.outputs.productcatalog }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect changed services
        id: changes
        run: |
          echo "Detecting changes..."
          
          # Check currencyservice changes
          if git diff --name-only HEAD~1 HEAD | grep -q "^src/currencyservice/"; then
            echo "currency=true" >> $GITHUB_OUTPUT
            echo "‚úÖ currencyservice changed"
          else
            echo "currency=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è  currencyservice unchanged"
          fi
          
          # Check productcatalogservice changes
          if git diff --name-only HEAD~1 HEAD | grep -q "^src/productcatalogservice/"; then
            echo "productcatalog=true" >> $GITHUB_OUTPUT
            echo "‚úÖ productcatalogservice changed"
          else
            echo "productcatalog=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è  productcatalogservice unchanged"
          fi

  # Job 2: Build currencyservice (Node.js)
  build_currencyservice:
    runs-on: ubuntu-latest
    needs: detect_changes
    if: needs.detect_changes.outputs.currency_changed == 'true'
    
    env:
      SERVICE_NAME: currencyservice
      NODE_VERSION: '18'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Print service info
        run: |
          echo "üîß Building Service: ${{ env.SERVICE_NAME }}"
          echo "üì¶ Node Version: ${{ env.NODE_VERSION }}"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo "üë§ Triggered by: ${{ github.actor }}"
      
      - name: Install dependencies
        run: |
          cd src/${{ env.SERVICE_NAME }}
          npm install
          npm install --save-dev jest
      
      - name: Run tests
        run: |
          cd src/${{ env.SERVICE_NAME }}
          npm test
      
      - name: Build Docker image
        if: github.ref_name == 'main'
        run: |
          cd src/${{ env.SERVICE_NAME }}
          docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.SERVICE_NAME }}:latest \
                       -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
      
      - name: Login to Docker Hub
        if: github.ref_name == 'main'
        run: |
          echo "${{ env.DOCKER_HUB_TOKEN }}" | docker login -u "${{ env.DOCKER_HUB_USERNAME }}" --password-stdin
      
      - name: Push Docker image
        if: github.ref_name == 'main'
        run: |
          docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.SERVICE_NAME }}:latest
          docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          echo "‚úÖ Pushed: ${{ env.SERVICE_NAME }}:latest"
          echo "‚úÖ Pushed: ${{ env.SERVICE_NAME }}:${{ github.sha }}"

  # Job 3: Build productcatalogservice (Go)
  build_productcatalogservice:
    runs-on: ubuntu-latest
    needs: detect_changes
    if: needs.detect_changes.outputs.productcatalog_changed == 'true'
    
    env:
      SERVICE_NAME: productcatalogservice
      GO_VERSION: '1.23'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Print service info
        run: |
          echo "üîß Building Service: ${{ env.SERVICE_NAME }}"
          echo "üêπ Go Version: ${{ env.GO_VERSION }}"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo "üë§ Triggered by: ${{ github.actor }}"
      
      - name: Download dependencies
        run: |
          cd src/${{ env.SERVICE_NAME }}
          go mod download
          go mod verify
      
      - name: Run tests
        run: |
          cd src/${{ env.SERVICE_NAME }}
          go test -v ./...
      
      - name: Build application locally
        run: |
          cd src/${{ env.SERVICE_NAME }}
          go build -v -o server .
          echo "‚úÖ Go build successful"
      
      - name: Build Docker image
        if: github.ref_name == 'main'
        run: |
          cd src/${{ env.SERVICE_NAME }}
          docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.SERVICE_NAME }}:latest \
                       -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
      
      - name: Login to Docker Hub
        if: github.ref_name == 'main'
        run: |
          echo "${{ env.DOCKER_HUB_TOKEN }}" | docker login -u "${{ env.DOCKER_HUB_USERNAME }}" --password-stdin
      
      - name: Push Docker image
        if: github.ref_name == 'main'
        run: |
          docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.SERVICE_NAME }}:latest
          docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          echo "‚úÖ Pushed: ${{ env.SERVICE_NAME }}:latest"
          echo "‚úÖ Pushed: ${{ env.SERVICE_NAME }}:${{ github.sha }}"

  # Job 4: Summary (always runs)
  pipeline_summary:
    runs-on: ubuntu-latest
    needs: [detect_changes, build_currencyservice, build_productcatalogservice]
    if: always()
    
    steps:
      - name: Pipeline summary
        run: |
          echo "## üìä CI Pipeline Summary"
          echo ""
          echo "### Services Status:"
          
          if [ "${{ needs.detect_changes.outputs.currency_changed }}" == "true" ]; then
            echo "- ‚úÖ currencyservice: Built"
          else
            echo "- ‚è≠Ô∏è  currencyservice: Skipped (no changes)"
          fi
          
          if [ "${{ needs.detect_changes.outputs.productcatalog_changed }}" == "true" ]; then
            echo "- ‚úÖ productcatalogservice: Built"
          else
            echo "- ‚è≠Ô∏è  productcatalogservice: Skipped (no changes)"
          fi
          
          echo ""
          echo "### Workflow Info:"
          echo "- Branch: ${{ github.ref_name }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Triggered by: ${{ github.actor }}"